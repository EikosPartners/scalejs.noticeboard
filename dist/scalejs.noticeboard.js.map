{"version":3,"sources":["../src/scalejs.noticeboard.js"],"names":[],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AACA,IAAI,aAAa,mBAAG,UAApB;AAAA,IACI,WAAW,mBAAG,QADlB;AAAA,IAEI,SAAS,aAFb;;AAIA,SAAS,WAAT,GAAuB;AACnB,QAAI,aAAa,WAAW,EAAX,CAAjB;AAAA,QACI,OAAO,EADX;;;;AAKA,aAAS,QAAT,CAAkB,GAAlB,EAAuB,KAAvB,EAA8B;AAC1B,YAAI,aAAa,GAAb,CAAJ,EAAuB;AACnB,yBAAa,GAAb,EAAkB,KAAlB;AACH,SAFD,MAEO;AACH,yBAAa,GAAb,IAAoB,WAAW,KAAX,CAApB;AACA,uBAAW,eAAX;AACH;AACJ;;AAED,aAAS,QAAT,CAAkB,GAAlB,EAAuB;AACnB,YAAI,OAAO,aAAa,GAAb,CAAX;AACA,YAAI,IAAJ,EAAU;AACN,mBAAO,MAAP;AACH;AACJ;;AAED,aAAS,SAAT,CAAmB,GAAnB,EAAwB,QAAxB,EAAkC;AAC9B,YAAI,MAAM,SAAS,YAAY;AAC3B,mBAAO,SAAS,GAAT,CAAP;AACH,SAFS,CAAV;AAGA,YAAI,SAAJ,CAAc,UAAU,QAAV,EAAoB;AAC9B,qBAAS,QAAT;AACH,SAFD;AAGA,iBAAS,KAAT,E;AACA,aAAK,GAAL,IAAY,KAAK,GAAL,KAAa,EAAzB;AACA,aAAK,GAAL,EAAU,IAAV,CAAe,GAAf;AACA,eAAO,GAAP;AACH;;AAED,aAAS,MAAT,CAAgB,GAAhB,EAAqB;AACjB,YAAI,aAAa,GAAb,CAAJ,EAAuB;AACnB,gBAAI,KAAK,GAAL,CAAJ,EAAe;AACX,qBAAK,GAAL,EAAU,OAAV,CAAkB,UAAU,GAAV,EAAe;AAC7B,wBAAI,OAAJ;AACH,iBAFD;AAGH;AACD,mBAAO,aAAa,GAAb,CAAP;AACA,uBAAW,eAAX;AACH;AACJ;;AAED,WAAO;AACH,kBAAU,QADP;AAEH,kBAAU,QAFP;AAGH,aAAK,QAHF;AAIH,aAAK,QAJF;AAKH,mBAAW,SALR;AAMH,gBAAQ,MANL;AAOH,oBAAY;AAPT,KAAP;AASH;;AAED,kBAAK,iBAAL,CAAuB;AACnB,iBAAa;AACT,8BAAsB,WADb;AAET,gBAAQ;AAFC;AADM,CAAvB;;IASI,Q,GAOA,M,CAPA,Q;IACA,Q,GAMA,M,CANA,Q;IACA,G,GAKA,M,CALA,G;IACA,G,GAIA,M,CAJA,G;IACA,S,GAGA,M,CAHA,S;IACA,M,GAEA,M,CAFA,M;IACA,U,GACA,M,CADA,U;QAIA,Q,GAAA,Q;QACA,Q,GAAA,Q;QACA,G,GAAA,G;QACA,G,GAAA,G;QACA,S,GAAA,S;QACA,M,GAAA,M;QACA,U,GAAA,U;QACe,oB,GAAf,W;kBAEW;AACX,sBADW;AAEX,sBAFW;AAGX,YAHW;AAIX,YAJW;AAKX,wBALW;AAMX,kBANW;AAOX,0BAPW;AAQX,0BAAuB;AARZ,C","file":"scalejs.noticeboard.js","sourcesContent":["import ko from 'knockout';\nimport core from 'scalejs.core';\nvar observable = ko.observable,\n    computed = ko.computed,\n    global = noticeboard();\n\nfunction noticeboard() {\n    var dictionary = observable({}),\n        subs = {};\n\n    // will set the value on an existing observable\n\n    function setValue(key, value) {\n        if (dictionary()[key]) {\n            dictionary()[key](value);\n        } else {\n            dictionary()[key] = observable(value);\n            dictionary.valueHasMutated();\n        }\n    }\n\n    function getValue(key) {\n        var item = dictionary()[key];\n        if (item) {\n            return item();\n        }\n    }\n\n    function subscribe(key, callback) {\n        var sub = computed(function () {\n            return getValue(key);\n        });\n        sub.subscribe(function (newValue) {\n            callback(newValue);\n        });\n        callback(sub()); // When initially called\n        subs[key] = subs[key] || [];\n        subs[key].push(sub);\n        return sub;\n    }\n\n    function remove(key) {\n        if (dictionary()[key]) {\n            if (subs[key]) {\n                subs[key].forEach(function (sub) {\n                    sub.dispose();\n                })\n            }\n            delete dictionary()[key];\n            dictionary.valueHasMutated();\n        }\n    }\n\n    return {\n        setValue: setValue,\n        getValue: getValue,\n        get: getValue,\n        set: setValue,\n        subscribe: subscribe,\n        remove: remove,\n        dictionary: dictionary\n    };\n}\n\ncore.registerExtension({\n    noticeboard: {\n        createNewNoticeboard: noticeboard,\n        global: noticeboard()\n    }\n});\n\n\nlet {\n    setValue,\n    getValue,\n    get,\n    set,\n    subscribe,\n    remove,\n    dictionary\n} = global;\n\nexport {\n    setValue,\n    getValue,\n    get,\n    set,\n    subscribe,\n    remove,\n    dictionary,\n    noticeboard as createNewNoticeboard\n}\nexport default {\n    setValue,\n    getValue,\n    get,\n    set,\n    subscribe,\n    remove,\n    dictionary,\n    createNewNoticeboard : noticeboard\n}\n\n\n\n"]}